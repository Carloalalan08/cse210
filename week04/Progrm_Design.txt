**W04 Assignment: Program Design Document**

---

## **Foundation Program #1: Abstraction with YouTube Videos**

### **What does the program do?**
This program keeps track of YouTube videos and the comments left on them. It stores details about each video, including its title, author, and length, as well as a list of comments. The program then displays all stored videos along with their respective comments.

### **Candidates for Classes**
1. **Video**
2. **Comment**

### **Responsibilities of Each Class**
- **Video Class:**
  - Attributes:
    - `title` (string)
    - `author` (string)
    - `length` (integer, in seconds)
    - `comments` (list of Comment objects)
  - Methods:
    - `__init__(title, author, length)`: Initializes the video object.
    - `add_comment(comment)`: Adds a comment to the video.
    - `get_comment_count()`: Returns the total number of comments.
    - `display_video_info()`: Displays video details and all comments.

- **Comment Class:**
  - Attributes:
    - `commenter_name` (string)
    - `comment_text` (string)
  - Methods:
    - `__init__(commenter_name, comment_text)`: Initializes a comment object.
    - `display_comment()`: Displays the commenter's name and text.

### **Program Execution Flow**
1. Create 3-4 video objects.
2. Assign attributes (title, author, length) to each video.
3. Create 3-4 comments for each video and add them.
4. Store all videos in a list.
5. Iterate through the list and display each video's details and comments.

---

## **Foundation Program #2: Encapsulation with Online Ordering**

### **What does the program do?**
This program manages an online ordering system that includes products, customers, addresses, and orders. It calculates the total cost of an order, generates packing labels, and produces shipping labels.

### **Candidates for Classes**
1. **Product**
2. **Customer**
3. **Address**
4. **Order**

### **Responsibilities of Each Class**
- **Product Class:**
  - Attributes:
    - `name` (string)
    - `product_id` (string)
    - `price` (float)
    - `quantity` (integer)
  - Methods:
    - `__init__(name, product_id, price, quantity)`: Initializes a product.
    - `get_total_cost()`: Returns the total cost of the product.

- **Customer Class:**
  - Attributes:
    - `name` (string)
    - `address` (Address object)
  - Methods:
    - `__init__(name, address)`: Initializes a customer.
    - `is_in_usa()`: Checks if the customer is in the USA.

- **Address Class:**
  - Attributes:
    - `street` (string)
    - `city` (string)
    - `state` (string)
    - `country` (string)
  - Methods:
    - `__init__(street, city, state, country)`: Initializes an address.
    - `is_in_usa()`: Returns True if the address is in the USA.
    - `get_full_address()`: Returns the full address as a formatted string.

- **Order Class:**
  - Attributes:
    - `products` (list of Product objects)
    - `customer` (Customer object)
  - Methods:
    - `__init__(customer)`: Initializes an order with a customer.
    - `add_product(product)`: Adds a product to the order.
    - `get_total_price()`: Calculates the total price, including shipping.
    - `generate_packing_label()`: Returns a formatted packing label.
    - `generate_shipping_label()`: Returns a formatted shipping label.

### **Program Execution Flow**
1. Create at least two orders.
2. Create 2-3 products for each order.
3. Assign customer details and address information.
4. Add products to the orders.
5. Compute and display:
   - Packing label
   - Shipping label
   - Total price of the order

---

## **Conclusion**
This document outlines the design of the two foundation programs, including their structure, class responsibilities, attributes, and behaviors. These designs ensure abstraction in the YouTube Video program and encapsulation in the Online Ordering program. The implementations will follow these designs to create well-organized, modular, and maintainable code structures.

